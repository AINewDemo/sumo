//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.03.05 at 04:36:39 PM CET 
//


package jrc.it.annotation.reader.jaxb;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for signalType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="signalType">
 *   &lt;restriction base="{}string">
 *     &lt;enumeration value="Echo"/>
 *     &lt;enumeration value="Noise"/>
 *     &lt;enumeration value="TxCal"/>
 *     &lt;enumeration value="RxCal"/>
 *     &lt;enumeration value="EpdnCal"/>
 *     &lt;enumeration value="TxHCalIso"/>
 *     &lt;enumeration value="TaCal"/>
 *     &lt;enumeration value="ApdnCal"/>
 *     &lt;enumeration value="TaRxCal"/>
 *     &lt;enumeration value="ApdnRxCal"/>
 *     &lt;enumeration value="TxRxOff"/>
 *     &lt;enumeration value="Silent"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "signalType")
@XmlEnum
public enum SignalType {

    @XmlEnumValue("Echo")
    ECHO("Echo"),
    @XmlEnumValue("Noise")
    NOISE("Noise"),
    @XmlEnumValue("TxCal")
    TX_CAL("TxCal"),
    @XmlEnumValue("RxCal")
    RX_CAL("RxCal"),
    @XmlEnumValue("EpdnCal")
    EPDN_CAL("EpdnCal"),
    @XmlEnumValue("TxHCalIso")
    TX_H_CAL_ISO("TxHCalIso"),
    @XmlEnumValue("TaCal")
    TA_CAL("TaCal"),
    @XmlEnumValue("ApdnCal")
    APDN_CAL("ApdnCal"),
    @XmlEnumValue("TaRxCal")
    TA_RX_CAL("TaRxCal"),
    @XmlEnumValue("ApdnRxCal")
    APDN_RX_CAL("ApdnRxCal"),
    @XmlEnumValue("TxRxOff")
    TX_RX_OFF("TxRxOff"),
    @XmlEnumValue("Silent")
    SILENT("Silent");
    private final String value;

    SignalType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static SignalType fromValue(String v) {
        for (SignalType c: SignalType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
